
Servo.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000013a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000e6  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000013a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000016c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007a8  00000000  00000000  000001cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000068a  00000000  00000000  00000974  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002b5  00000000  00000000  00000ffe  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  000012b4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000376  00000000  00000000  000012d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000d6  00000000  00000000  0000164e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001724  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 71 00 	jmp	0xe2	; 0xe2 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:


int main(void)
{
	// 0000 1100
	DDRB = 0x0C;
  80:	8c e0       	ldi	r24, 0x0C	; 12
  82:	84 b9       	out	0x04, r24	; 4
	PORTB = (0<<PB3)|(0<<PB2)|(0<<PB1)|(0<<PB0);
  84:	15 b8       	out	0x05, r1	; 5
	
	// 1111 1100
	DDRD = 0xFC;
  86:	8c ef       	ldi	r24, 0xFC	; 252
  88:	8a b9       	out	0x0a, r24	; 10
		if((PINB & 0x01) && !(PINB & 0x02))
		{
			PORTB = (0<<PB3)|(0<<PB2);
			_delay_ms(20);

			PORTB = (1<<PB3)|(1<<PB2);
  8a:	8c e0       	ldi	r24, 0x0C	; 12
	DDRD = 0xFC;
	
    /* Replace with your application code */
    while (1) 
    {
		if((PINB & 0x01) && !(PINB & 0x02))
  8c:	18 9b       	sbis	0x03, 0	; 3
  8e:	13 c0       	rjmp	.+38     	; 0xb6 <main+0x36>
  90:	19 99       	sbic	0x03, 1	; 3
  92:	11 c0       	rjmp	.+34     	; 0xb6 <main+0x36>
		{
			PORTB = (0<<PB3)|(0<<PB2);
  94:	15 b8       	out	0x05, r1	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  96:	2f ef       	ldi	r18, 0xFF	; 255
  98:	39 ef       	ldi	r19, 0xF9	; 249
  9a:	90 e0       	ldi	r25, 0x00	; 0
  9c:	21 50       	subi	r18, 0x01	; 1
  9e:	30 40       	sbci	r19, 0x00	; 0
  a0:	90 40       	sbci	r25, 0x00	; 0
  a2:	e1 f7       	brne	.-8      	; 0x9c <main+0x1c>
  a4:	00 c0       	rjmp	.+0      	; 0xa6 <main+0x26>
  a6:	00 00       	nop
			_delay_ms(20);

			PORTB = (1<<PB3)|(1<<PB2);
  a8:	85 b9       	out	0x05, r24	; 5
  aa:	ef e9       	ldi	r30, 0x9F	; 159
  ac:	ff e0       	ldi	r31, 0x0F	; 15
  ae:	31 97       	sbiw	r30, 0x01	; 1
  b0:	f1 f7       	brne	.-4      	; 0xae <main+0x2e>
  b2:	00 c0       	rjmp	.+0      	; 0xb4 <main+0x34>
  b4:	00 00       	nop
			_delay_ms(1);
		}
		
		if(!(PINB & 0x01) && (PINB & 0x02))
  b6:	18 99       	sbic	0x03, 0	; 3
  b8:	e9 cf       	rjmp	.-46     	; 0x8c <main+0xc>
  ba:	19 9b       	sbis	0x03, 1	; 3
  bc:	e7 cf       	rjmp	.-50     	; 0x8c <main+0xc>
		{
			PORTB = (0<<PB3)|(0<<PB2);
  be:	15 b8       	out	0x05, r1	; 5
  c0:	ff ef       	ldi	r31, 0xFF	; 255
  c2:	29 ef       	ldi	r18, 0xF9	; 249
  c4:	30 e0       	ldi	r19, 0x00	; 0
  c6:	f1 50       	subi	r31, 0x01	; 1
  c8:	20 40       	sbci	r18, 0x00	; 0
  ca:	30 40       	sbci	r19, 0x00	; 0
  cc:	e1 f7       	brne	.-8      	; 0xc6 <main+0x46>
  ce:	00 c0       	rjmp	.+0      	; 0xd0 <main+0x50>
  d0:	00 00       	nop
			_delay_ms(20);

			PORTB = (1<<PB3)|(1<<PB2);
  d2:	85 b9       	out	0x05, r24	; 5
  d4:	ef e3       	ldi	r30, 0x3F	; 63
  d6:	ff e1       	ldi	r31, 0x1F	; 31
  d8:	31 97       	sbiw	r30, 0x01	; 1
  da:	f1 f7       	brne	.-4      	; 0xd8 <main+0x58>
  dc:	00 c0       	rjmp	.+0      	; 0xde <main+0x5e>
  de:	00 00       	nop
  e0:	d5 cf       	rjmp	.-86     	; 0x8c <main+0xc>

000000e2 <_exit>:
  e2:	f8 94       	cli

000000e4 <__stop_program>:
  e4:	ff cf       	rjmp	.-2      	; 0xe4 <__stop_program>
